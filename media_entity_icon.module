<?php

/**
 * @file
 * Media entity for icon files.
 */

use Drupal\Core\Form\FormStateInterface;

use Drupal\media_entity\MediaInterface;

/**
 * Implements hook_theme().
 */
function media_entity_icon_theme($existing, $type, $theme, $path) {
  return [
    'media_icon_svg_formatter' => [
      'variables' => [
        'icons_path'      => NULL,
        'icon_class'      => NULL,
        'wrap'            => FALSE,
        'wrap_attributes' => NULL,
        'content'         => NULL,
        'reverse'         => FALSE,
        'attributes'      => [],
      ],
    ],
  ];
}

/**
 * Implements hook_preprocess_HOOK().
 */
function media_entity_icon_preprocess_media_icon_svg_formatter(&$vars) {
  // Set Aria hidden as default.
  $vars['attributes']['aria-hidden'] = 'true';
}

/**
 * Allow to fill default values for manual icon creation.
 *
 * Implements hook_form_BASE_FORM_ID_alter().
 */
function media_entity_icon_form_media_form_alter(&$form, FormStateInterface $form_state) {
  $build_info = $form_state->getBuildInfo();

  // Has expected query arguments.
  /** @var \Symfony\Component\HttpFoundation\RequestStack $current_request */
  $current_request = \Drupal::service('request_stack')->getCurrentRequest();
  $source_id = $current_request->get('source_id');
  $icon_id = $current_request->get('icon_id');
  if (empty($source_id) || !is_numeric($source_id) || empty($icon_id)) {
    return;
  }

  // Must be an icon bundle.
  list(, $bundle_id,) = explode('_', $build_info['form_id'], 3);
  $icon_bundle_ids = \Drupal::service('media_entity_icon.manager.svg.type')
    ->getIconBundleNames();
  if (!isset($icon_bundle_ids[$bundle_id])) {
    return;
  }

  // Set default values.
  $form['name']['widget'][0]['value']['#default_value'] = $icon_id;

  $icon_source_field = \Drupal::service('media_entity_icon.manager.svg.type')
    ->getIconBundleSourceField($bundle_id);
  if (isset($form[$icon_source_field])) {
    $form[$icon_source_field]['widget']['#default_value'] = $source_id;
  }

  $icon_id_field = \Drupal::service('media_entity_icon.manager.svg.type')
    ->getIconBundleIdField($bundle_id);
  if (isset($form[$icon_id_field])) {
    $form[$icon_id_field]['widget'][0]['value']['#default_value'] = $icon_id;
  }
}

/**
 * Autocreate icons if option is selected.
 *
 * Implements hook_ENTITY_TYPE_insert().
 */
function media_entity_icon_media_insert(MediaInterface $media) {
  /** @var \Drupal\media_entity\MediaTypeInterface $media_type */
  $media_type = $media->getType();
  if ('svg_sprite' !== $media_type->getPluginId()) {
    return;
  }

  $media_config = $media_type->getConfiguration();
  if (!empty($media_config['autocreate_icons']) && !empty($media_config['autocreate_triggers']['insert'])) {
    $media_type->updateIcons($media);
  }
}

/**
 * Autocreate icons if option is selected.
 *
 * @implements hook_ENTITY_TYPE_update()
 */
function media_entity_icon_media_update(MediaInterface $media) {
  /** @var \Drupal\media_entity\MediaTypeInterface $media_type */
  $media_type = $media->getType();
  if ('svg_sprite' !== $media_type->getPluginId()) {
    return;
  }

  $media_config = $media_type->getConfiguration();
  if (!empty($media_config['autocreate_icons']) && !empty($media_config['autocreate_triggers']['update'])) {
    $media_realpath = $media_type->getField($media, 'realpath');

    $existing_icons = $media_type->getExistingIcons($media);
    $source_icons = \Drupal::service('media_entity_icon.manager.svg')->extractIconIds($media_realpath);
    $missing_icons = !empty($existing_icons) ? array_diff_key($source_icons, $existing_icons) : $source_icons;

    $media_type->updateIcons($media, $missing_icons);
  }
}
